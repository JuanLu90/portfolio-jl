---
interface NavItem {
  label: string;
  href: string;
}

const navItems: NavItem[] = [
  { label: "About me", href: "#aboutme" },
  { label: "Experience", href: "#experience" },
  { label: "Projects", href: "#projects" },
];
---

<header
  class="fixed top-0 left-0 w-full bg-background/80 backdrop-blur-sm z-50"
>
  <nav class="max-w-4xl mx-auto flex justify-center py-4">
    <ul class="flex gap-8">
      {
        navItems.map((item) => (
          <li>
            <a
              href={item.href}
              data-spy-link
              class="font-semibold transition-colors duration-200 text-slate-300 hover:text-accent"
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.querySelector("header");
    const headerOffset = (header?.offsetHeight ?? 0) + 8; // margen fino
    const links = Array.from(document.querySelectorAll("[data-spy-link]"));

    if (!links.length) return;

    const anchors = links
      .map((a) => a.getAttribute("href"))
      .filter((href) => href && href.startsWith("#"))
      .map((href) => {
        const id = href.substring(1);
        const el = document.getElementById(id);
        return el ? { href, el } : null;
      })
      .filter((a) => a !== null);

    const setActive = (href) => {
      links.forEach((a) => {
        const active = a.getAttribute("href") === href;
        a.classList.toggle("text-yellow-500", active);
        a.classList.toggle("text-slate-300", !active);
      });
    };

    let ticking = false;
    const updateActive = () => {
      ticking = false;
      if (!anchors.length) return;

      const passed = anchors
        .map((a) => ({ href: a.href, top: a.el.getBoundingClientRect().top }))
        .filter((x) => x.top - headerOffset <= 0)
        .sort(
          (a, b) =>
            Math.abs(a.top - headerOffset) - Math.abs(b.top - headerOffset)
        );

      if (passed.length) {
        setActive(passed[0].href);
        return;
      }

      const upcoming = anchors
        .map((a) => ({ href: a.href, top: a.el.getBoundingClientRect().top }))
        .sort((a, b) => a.top - b.top);

      if (upcoming.length) setActive(upcoming[0].href);
    };

    const onScroll = () => {
      if (!ticking) {
        requestAnimationFrame(updateActive);
        ticking = true;
      }
    };

    window.addEventListener("scroll", onScroll, { passive: true });
    window.addEventListener("resize", onScroll);
    links.forEach((a) =>
      a.addEventListener("click", () => setActive(a.getAttribute("href")))
    );

    // Estado inicial (hash o tope de p√°gina)
    if (location.hash) setActive(location.hash);
    updateActive();
  });
</script>
